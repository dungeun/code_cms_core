name: CD Pipeline

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  IMAGE_NAME: blee-cms

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.environment.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::8}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Determine environment
        id: environment
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            ENVIRONMENT=production
          elif [[ "${{ github.event.inputs.environment }}" != "" ]]; then
            ENVIRONMENT=${{ github.event.inputs.environment }}
          else
            ENVIRONMENT=staging
          fi
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.version }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.environment }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            APP_VERSION=${{ needs.prepare.outputs.version }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push]
    if: needs.prepare.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.blee-cms.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Coolify Staging
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.COOLIFY_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "project": "blee-cms",
              "environment": "staging",
              "image": "${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.version }}",
              "branch": "${{ github.ref_name }}"
            }' \
            https://coolify.staging.blee-cms.com/api/v1/deploy
      
      - name: Wait for deployment
        run: |
          sleep 30
          for i in {1..20}; do
            if curl -f https://staging.blee-cms.com/api/health; then
              echo "Deployment successful!"
              exit 0
            fi
            echo "Waiting for deployment... (attempt $i/20)"
            sleep 15
          done
          echo "Deployment health check failed!"
          exit 1
      
      - name: Run smoke tests
        run: |
          npm ci
          npm run test:smoke -- --url=https://staging.blee-cms.com

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push]
    if: needs.prepare.outputs.environment == 'production'
    environment:
      name: production
      url: https://blee-cms.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: ${{ github.token }}
          environment: production
          ref: ${{ github.ref }}
      
      - name: Deploy to Coolify Production
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.COOLIFY_PROD_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "project": "blee-cms",
              "environment": "production",
              "image": "${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.version }}",
              "strategy": "blue-green",
              "healthcheck_retries": 5
            }' \
            https://coolify.blee-cms.com/api/v1/deploy
      
      - name: Wait for deployment
        run: |
          sleep 60
          for i in {1..30}; do
            if curl -f https://blee-cms.com/api/health; then
              echo "Deployment successful!"
              break
            fi
            echo "Waiting for deployment... (attempt $i/30)"
            sleep 20
          done
      
      - name: Run production smoke tests
        run: |
          npm ci
          npm run test:smoke -- --url=https://blee-cms.com
      
      - name: Update deployment status
        uses: chrnorm/deployment-status@v2
        if: always()
        with:
          token: ${{ github.token }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: ${{ job.status }}
          environment-url: https://blee-cms.com

  database-migration:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [prepare, deploy-staging]
    if: needs.prepare.outputs.environment == 'staging' || needs.prepare.outputs.environment == 'production'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run migrations
        env:
          DATABASE_URL: ${{ secrets[format('{0}_DATABASE_URL', needs.prepare.outputs.environment)] }}
        run: |
          npx prisma migrate deploy
          npx prisma db seed --skip-generate

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [prepare, deploy-production]
    if: failure() && needs.prepare.outputs.environment == 'production'
    steps:
      - name: Trigger rollback
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.COOLIFY_PROD_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "project": "blee-cms",
              "environment": "production",
              "action": "rollback"
            }' \
            https://coolify.blee-cms.com/api/v1/rollback
      
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "⚠️ Production deployment failed and was rolled back",
              attachments: [{
                color: 'warning',
                fields: [
                  { title: 'Version', value: '${{ needs.prepare.outputs.version }}', short: true },
                  { title: 'Environment', value: 'production', short: true },
                  { title: 'Triggered by', value: '${{ github.actor }}', short: true }
                ]
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Delete old Docker images
        run: |
          # Keep only the last 5 versions
          curl -X DELETE \
            -H "Authorization: Bearer ${{ secrets.DOCKER_REGISTRY_TOKEN }}" \
            "${{ env.DOCKER_REGISTRY }}/v2/${{ env.IMAGE_NAME }}/manifests?keep=5"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [prepare, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment ${{ job.status }}
            Environment: ${{ needs.prepare.outputs.environment }}
            Version: ${{ needs.prepare.outputs.version }}
            Actor: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: env.SLACK_WEBHOOK != ''
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        if: always() && env.DISCORD_WEBHOOK != ''
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Deployment to ${{ needs.prepare.outputs.environment }}"
          description: |
            **Status:** ${{ job.status }}
            **Version:** ${{ needs.prepare.outputs.version }}
            **Environment:** ${{ needs.prepare.outputs.environment }}
            **Triggered by:** ${{ github.actor }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}