# 프로덕션용 멀티스테이지 Dockerfile

# Stage 1: Base image with dependencies
FROM node:18-alpine AS base

# 필수 시스템 패키지 설치
RUN apk add --no-cache \
    curl \
    dumb-init \
    && rm -rf /var/cache/apk/*

# 작업 디렉토리 설정
WORKDIR /app

# 보안을 위한 사용자 생성
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

# Stage 2: Dependencies installation
FROM base AS deps

# Package files 복사
COPY package*.json ./
COPY prisma ./prisma/

# 의존성 설치 (production only)
RUN npm ci --only=production --ignore-scripts && \
    npm cache clean --force

# Prisma 클라이언트 생성
RUN npx prisma generate

# Stage 3: Build application
FROM base AS builder

# 빌드에 필요한 패키지 설치
RUN apk add --no-cache python3 make g++

# 소스 코드 복사
COPY . .
COPY --from=deps /app/node_modules ./node_modules

# 빌드 환경 변수
ARG NODE_ENV=production
ARG SKIP_ENV_VALIDATION=1

# 애플리케이션 빌드
RUN npm run build && \
    npm prune --production

# Stage 4: Production image
FROM base AS runtime

# 프로덕션 환경 변수
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Sharp 최적화를 위한 패키지 설치
RUN apk add --no-cache \
    vips-dev \
    && rm -rf /var/cache/apk/*

# 애플리케이션 파일 복사
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /app/build ./build
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nextjs:nodejs /app/package*.json ./

# 스크립트 복사 및 실행 권한 설정
COPY --chown=nextjs:nodejs ./scripts/docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# 업로드 및 로그 디렉토리 생성
RUN mkdir -p /app/uploads /app/logs && \
    chown -R nextjs:nodejs /app/uploads /app/logs

# 사용자 변경
USER nextjs

# 포트 노출
EXPOSE 3000

# 헬스체크 설정
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# 엔트리포인트 및 명령어 설정
ENTRYPOINT ["dumb-init", "/usr/local/bin/docker-entrypoint.sh"]
CMD ["npm", "start"]